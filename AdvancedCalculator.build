<?xml version="1.0"?>
<project name="Facebook Demo Context" default="main">
	<property unless="${property::exists('baseDir')}" name="baseDir" value="${project::get-base-directory()}" />
	<property unless="${property::exists('releaseDir')}" name="releaseDir" value="${baseDir}\Releases" />
	<property unless="${property::exists('buildType')}" name="buildType" value="dev" />

	<property unless="${property::exists('svn.login')}" name="svn.login" value="masha" />
	<property unless="${property::exists('svn.password')}" name="svn.password" value="bar" />

	<property unless="${property::exists('makereleasepackage.copydir')}" name="makereleasepackage.copydir" value="${baseDir}\ToDeploy" />
	<property unless="${property::exists('makereleasepackage.domainassemblypath')}" name="makereleasepackage.domainassemblypath" value="AdvancedCalculator\bin\Release\FilterSimulationWithTablesAndGraphs.dll" />
	<property unless="${property::exists('makereleasepackage.sitename')}" name="makereleasepackage.sitename" value="AdvancedCalculator" />


	<property unless="${property::exists('svn.revision')}" name="svn.revision" value="head" />
	<property unless="${property::exists('build.version.major')}" name="build.version.major" value="1" />
	<property unless="${property::exists('build.version.minor')}" name="build.version.minor" value="0" />
	<property unless="${property::exists('build.version.build')}" name="build.version.build" value="1" />
	<property unless="${property::exists('build.version.revision')}" name="build.version.revision" value="0" />
	<property unless="${property::exists('build.framework.dir')}" name="build.framework.dir" value="${framework::get-framework-directory('net-2.0')}" />
	<property unless="${property::exists('build.solution')}" name="build.solution" value="AdvancedCalculator.sln" />

	        
	<target name="main">
		<call target="init" />
		<call target="svn" />
		<call target="config" />
		<call target="build" />
	</target>
    

	<!-- ******************************** -->
	<!-- **        Init Targets        ** -->
	<!-- ******************************** -->

	<target name="init">
		<call if="${buildType == 'staging'}" target="init.setVersion" />
	</target>

	<target name="init.setVersion">
		<property name="init.versionInfoFile" value="${releaseDir}/staging.version" />
		<exec program="svn.exe" commandline="update ${init.versionInfoFile} --username ${svn.login} --password ${svn.password}" workingdir="${baseDir}" />
		<loadfile file="${init.versionInfoFile}" property="init.versionInfo" />
		<regex pattern="(?'initMajor'\d+)\.(?'initMinor'\d+)\.(?'initBuild'\d+)\.(?'initRevision'\d+)" input="${init.versionInfo}" options="Multiline" />
		<property name="build.version.major" value="${initMajor}" />
		<property name="build.version.minor" value="${initMinor}" />
		<property name="build.version.build" value="${initBuild}" />
		<property name="svn.revision" value="${initRevision}" />
		<property name="build.version" value="${build.version.major}.${build.version.minor}" />
	</target>

	<!-- ******************************** -->
	<!-- **        SVN Targets         ** -->
	<!-- ******************************** -->

	<target name="svn" >
		<call target="svn.checkout" unless="${directory::exists(baseDir)}" />
		<call target="svn.update" />
		<call target="svn.revision" />
	</target>

	<target name="svn.checkout">
		<property name="svn.infoOutput" value=".svn.info.txt" />
		<exec program="svn.exe" commandline="info" workingdir="${project::get-base-directory()}" output="${svn.infoOutput}" />
		<loadfile file="${svn.infoOutput}" property="svn.info" encoding="iso-8859-1" />
		<regex pattern="(URL\: (?'svnUrl'.*))" input="${svn.info}" options="Multiline" />
		<exec program="svn.exe" commandline="checkout ${svnUrl} ${baseDir} --revision ${svn.revision} --username ${svn.login} --password ${svn.password}" workingdir="${project::get-base-directory()}" />
	</target>

	<target name="svn.update">
		<exec program="svn.exe" commandline="update" workingdir="${baseDir}" />
	</target>

	<target name="svn.revision">
		<property name="svn.infoOutput" value=".svn.info.txt" />
		<exec program="svn.exe" commandline="info" workingdir="${baseDir}" output="${svn.infoOutput}" />
		<loadfile file="${svn.infoOutput}" property="svn.info" />
		<regex pattern="(Revision\:\ (?'revision'[0-9]*))" input="${svn.info}" options="Multiline" />
		<property name="build.version.revision" value="${revision}" />
		<delete file="${svn.infoOutput}" />
	</target>


	<!-- ******************************** -->
	<!-- **       Config Targets       ** -->
	<!-- ******************************** -->

	<target name="config">
		<call target="config.copy"/>
	</target>

	<target name="config.copy">
		<foreach item="File" property="this.standardConfigFilename">
			<in>
				<items refid="files.config.standard" />
			</in>
			<do>
				<property name="this.configFilename" value="${this::remove-extension(this.standardConfigFilename)}" />
				<if test="${not file::exists(this.configFilename) or config.isAlwaysRecreate}">
					<copy verbose="true" file="${this.standardConfigFilename}" tofile="${this.configFilename}" overwrite="true" />
					<call target="config.replace" />
				</if>
			</do>
		</foreach>
	</target>
	<!-- ******************************** -->
	<!-- **       Build Targets        ** -->
	<!-- ******************************** -->

	<target name="build">
		<call target="build.version" />
		<call target="build.clearBins" />
		<call target="build.msbuild" />
		<call target="build.postBuildActions" />
	</target>


	<target name="build.release">
		<call target="build.clearBins" />
		<exec program="msbuild.exe" commandline="${build.solution} /property:Configuration=Release" basedir="${build.framework.dir}" workingdir="${baseDir}/" resultproperty="build.result" failonerror="false"  />
		<call target="build.postBuildActions" />
	</target>

	<target name= "build.version">
		<property if="${property::exists('CCNetLabel')}" unless="${property::exists('build.version.build')}" name="build.version.build" value="${CCNetLabel}" />
		<property unless="${property::exists('build.version.build')}" name="build.version.build" value="0" />
		<foreach item="File" property="this.assemblyinfoStandard">
			<in>
				<items basedir="${baseDir}">
					<include name="**\AssemblyInfo.cs.standard\**" />
					<exclude name="**\PrecompiledWeb\**" />
				</items>
			</in>
			<do>
				<copy file="${this.assemblyinfoStandard}" tofile="${this::remove-extension(this.assemblyinfoStandard)}" overwrite="true">
					<filterchain>
						<replacetokens begintoken="&lt;" endtoken="&gt;">
							<token key="MAJOR" value="${build.version.major}" />
	 						<token key="MINOR" value="${build.version.minor}" />
 							<token key="BUILD" value="${build.version.build}" />
 							<token key="REVISION" value="${build.version.revision}" />
						</replacetokens>
    					</filterchain>
				</copy>
			</do>
		</foreach>
	</target>
	<target name="build.clearBins">
		<delete>
			<fileset refid="files.build.binfiles" />
		</delete>
	</target>
	<target name="build.msbuild">
		<exec program="msbuild.exe" commandline="${build.solution}" basedir="${build.framework.dir}" workingdir="${baseDir}/" resultproperty="build.result" failonerror="false"  />
	</target>
	<target name="build.postBuildActions">

		<if test="${property::exists('build.result')}">
			<fail if="${build.result != '0'}" message="Msbuild failed. Exit code: ${build.result}" />
		</if>
	</target>

	<!-- ******************************** -->
	<!-- **        Test Targets        ** -->
	<!-- ******************************** -->

	<target name="tests">
		<call target="tests.init" />
		<call target="tests.execute" />
		<call target="tests.results" />
	</target>

	<target name="tests.init">
		<delete>
			<fileset refid="tests.results.files" />
		</delete>
	</target>
	
	<target name="tests.execute">
		<foreach item="File" property="testAssembly">
			<in>
				<items refid="tests.assemblies.files" />
			</in>
			<do>
				<echo message="Running test assembly: ${testAssembly}" />
				<nunit2 haltonfailure="true" failonerror="true">
					<formatter type="Plain" usefile="false" />
					<formatter type="Xml" usefile="true" extension=".xml" outputdir="${path::get-directory-name(testAssembly)}\Results" />
					<test assemblyname="${testAssembly}"/>
				</nunit2>
			</do>
		</foreach>
	</target>

	<target name="tests.results">
		<property name="customTestsSummary" value="" />
		<property name="totalFailures" value="0" />
		<property name="totalTests" value="0" />
		<foreach item="File" property="testResult">
			<in>
				<items refid="tests.results.files" />
			</in>
			<do>
				<xmlpeek file="${testResult}" xpath="/test-results/@failures" property="currentFailuresNumber" />
				<xmlpeek file="${testResult}" xpath="/test-results/@total" property="currentTestsNumber" />
				<property name="customTestsSummary" value="${customTestsSummary}&#xd;&#xa;${currentFailuresNumber} failures in ${testResult}" />
				<property name="totalFailures" value="${int::parse(totalFailures)+int::parse(currentFailuresNumber)}" />
				<property name="totalTests" value="${int::parse(totalTests)+int::parse(currentTestsNumber)}" />
			</do>
		</foreach>
		<echo message="${customTestsSummary}" />
		<echo message="Total Tests Failed: ${totalFailures} of ${totalTests}" />
		<fail if="${int::parse(totalFailures) > 0}" message="Total Tests Failed: ${totalFailures}." />
	</target>

	<!-- ******************************** -->
	<!-- **Make Release Package Targets** -->
	<!-- ******************************** -->
	<target name="release">
		<property name="config.mode" value="release" />
		<call target="config" />
		<call target="build.release" />
		<call target="makereleasepackage" />

	</target>

	<target name="makereleasepackage">
		<call target="makereleasepackage.copyfiles" />
		<call target="makereleasepackage.archivefiles" />
	</target>

	<target name="makereleasepackage.copyfiles">
		<echo message="makereleasepackage.copydir: ${makereleasepackage.copydir}" />		
		<delete dir="${makereleasepackage.copydir}" />
	                             	
		<copy todir="${makereleasepackage.copydir}">
			<fileset basedir="${baseDir}/AdvancedCalculator/bin">
		<include name="Release/**/*" />		
			</fileset>
		</copy>
	</target>

	<target name="makereleasepackage.archivefiles">
		<property name="this.assemblyName" value="${baseDir}\${makereleasepackage.domainassemblypath}" />
		<property name="this.currentDate" value="${datetime::now()}" />
		<property name="this.archivetitle" value="${makereleasepackage.sitename}_site" />
		<property name="this.archiveName" value="${releaseDir}\${this.archivetitle}_${this::format-number(datetime::get-year(this.currentDate))}${this::format-number(datetime::get-month(this.currentDate))}${this::format-number(datetime::get-day(this.currentDate))}_build_${assemblyname::get-version(assemblyname::get-assembly-name(this.assemblyName))}.rar" />
		<delete file="${this.archiveName}" />
		<echo message="C:\Program Files\WinRAR\winrar.exe a -r &quot;${this.archiveName}&quot; ${makereleasepackage.copydir}\* -afzip -ep1"/>
		<exec program="C:\Program Files\WinRAR\winrar.exe" commandline="a -r &quot;${this.archiveName}&quot; &quot;${makereleasepackage.copydir}\*&quot; -afzip -ep1" />
		<!--exec program="svn.exe" commandline="add ${this.archiveName}" / -->
	</target>

	<!-- ******************************** -->
	<!-- **         File Sets          ** -->
	<!-- ******************************** -->

	<fileset id="files.config.standard" basedir="${baseDir}">
		<include name="**\App.config.standard\**" />
		<exclude name="**\PrecompiledWeb\**" />
	</fileset>

	<fileset id="files.build.binfiles" basedir="${baseDir}">
		<include name="**\bin\**\*.*" />
		<include name="**\obj\**\*.*" />
		<exclude name="**\bin\*.dll.refresh" />
	</fileset>


	<!-- ******************************** -->
	<!-- **    Extension Functions     ** -->
	<!-- ******************************** -->

	<script language="C#" >
		<code>
			<![CDATA[
				[FunctionSet("this", "This")]
				public class ThisFunctions : FunctionSetBase
				{
					public ThisFunctions(Project project, PropertyDictionary properties) : base(project, properties) {}

					[Function("echo-property")]
					public string EchoProperty(string propertyName)
					{
						return string.Format("{0}='{1}'", propertyName, this.Project.Properties[propertyName]);
					}

					[Function("remove-extension")]
					public string RemoveExtension(string filename)
					{
						return filename.Substring(0, filename.LastIndexOf("."));
					}

					[Function("format-number")]
					public string FormatNumber(int number)
					{
						string result = number.ToString();
						if (result.Length == 1)
						{
							result = "0" + result;
						}
						return result;
					}
				}
			]]>
		</code>
	</script>

</project>